[
["vector-data-with-sf.html", "Chapter 4 Vector data with sf", " Chapter 4 Vector data with sf Figure 4.1: Sticky geometry with sf sf makes use of a couple key libraries that are the foundation for most open source geospatial software Figure 4.2: Source: https://www.r-spatial.org/r/2020/03/17/wkt.html Talk about the difference between st_read and read_sf. read_sf uses tidyverse-style defaults: quiet = TRUE as_tibble = TRUE stringsAsFactors = FALSE Mention units in sf… You can read many different vector data types (through gdal): - ESRI Shapefiles - Geopackages - Geojson - ESRI File Geodatabases - PostGIS databases - … We can easily see which drivers and how many are available to sf through gdal: library(dplyr) ## Warning: package &#39;dplyr&#39; was built under R version 3.6.3 ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(sf) ## Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1 print(paste0(&#39;There are &#39;,st_drivers(&quot;vector&quot;) %&gt;% nrow(), &#39; vector drivers available using st_read or read_sf&#39;)) ## [1] &quot;There are 82 vector drivers available using st_read or read_sf&quot; print(&#39;They are the following: &#39;) ## [1] &quot;They are the following: &quot; print(st_drivers(&quot;vector&quot;) %&gt;% dplyr::select(FullName = long_name)) ## FullName ## PCIDSK PCIDSK Database File ## netCDF Network Common Data Format ## PDS4 NASA Planetary Data System 4 ## JP2OpenJPEG JPEG-2000 driver based on OpenJPEG library ## JPEG2000 JPEG-2000 part 1 (ISO/IEC 15444-1), based on Jasper library ## PDF Geospatial PDF ## MBTiles MBTiles ## EEDA Earth Engine Data API ## ESRI Shapefile ESRI Shapefile ## MapInfo File MapInfo File ## UK .NTF UK .NTF ## OGR_SDTS SDTS ## S57 IHO S-57 (ENC) ## DGN Microstation DGN ## OGR_VRT VRT - Virtual Datasource ## REC EPIInfo .REC ## Memory Memory ## BNA Atlas BNA ## CSV Comma Separated Value (.csv) ## GML Geography Markup Language (GML) ## GPX GPX ## KML Keyhole Markup Language (KML) ## GeoJSON GeoJSON ## GeoJSONSeq GeoJSON Sequence ## ESRIJSON ESRIJSON ## TopoJSON TopoJSON ## OGR_GMT GMT ASCII Vectors (.gmt) ## GPKG GeoPackage ## SQLite SQLite / Spatialite ## ODBC ODBC ## WAsP WAsP .map format ## PGeo ESRI Personal GeoDatabase ## MSSQLSpatial Microsoft SQL Server Spatial Database ## PostgreSQL PostgreSQL/PostGIS ## MySQL MySQL ## OpenFileGDB ESRI FileGDB ## XPlane X-Plane/Flightgear aeronautical data ## DXF AutoCAD DXF ## CAD AutoCAD Driver ## Geoconcept Geoconcept ## GeoRSS GeoRSS ## GPSTrackMaker GPSTrackMaker ## VFK Czech Cadastral Exchange Data Format ## PGDUMP PostgreSQL SQL dump ## OSM OpenStreetMap XML and PBF ## GPSBabel GPSBabel ## SUA Tim Newport-Peace&#39;s Special Use Airspace Format ## OpenAir OpenAir ## OGR_PDS Planetary Data Systems TABLE ## WFS OGC WFS (Web Feature Service) ## WFS3 OGC WFS 3 client (Web Feature Service) ## HTF Hydrographic Transfer Vector ## AeronavFAA Aeronav FAA ## Geomedia Geomedia .mdb ## EDIGEO French EDIGEO exchange format ## GFT Google Fusion Tables ## SVG Scalable Vector Graphics ## CouchDB CouchDB / GeoCouch ## Cloudant Cloudant / CouchDB ## Idrisi Idrisi Vector (.vct) ## ARCGEN Arc/Info Generate ## SEGUKOOA SEG-P1 / UKOOA P1/90 ## SEGY SEG-Y ## XLS MS Excel format ## ODS Open Document/ LibreOffice / OpenOffice Spreadsheet ## XLSX MS Office Open XML spreadsheet ## ElasticSearch Elastic Search ## Walk Walk ## Carto Carto ## AmigoCloud AmigoCloud ## SXF Storage and eXchange Format ## Selafin Selafin ## JML OpenJUMP JML ## PLSCENES Planet Labs Scenes API ## CSW OGC CSW (Catalog Service for the Web) ## VDV VDV-451/VDV-452/INTREST Data Format ## MVT Mapbox Vector Tiles ## TIGER U.S. Census TIGER/Line ## AVCBin Arc/Info Binary Coverage ## AVCE00 Arc/Info E00 (ASCII) Coverage ## NGW NextGIS Web ## HTTP HTTP Fetching Wrapper Load tidycensus - you’ll need to set your Census API key. A key can be obtained from here. library(sf) library(tidycensus) ## Warning: package &#39;tidycensus&#39; was built under R version 3.6.3 ## Registered S3 method overwritten by &#39;rvest&#39;: ## method from ## read_xml.response xml2 # census_api_key(&quot;YOUR API KEY GOES HERE&quot;) library(tidycensus) library(ggplot2) ## Warning: package &#39;ggplot2&#39; was built under R version 3.6.3 options(tigris_use_cache = TRUE) austin_tracts &lt;- get_acs(state = &#39;TX&#39;, county = &#39;Travis&#39;, geography = &quot;tract&quot;, variables = &quot;B19013_001&quot;, geometry = TRUE) ## Getting data from the 2014-2018 5-year ACS austin_tracts %&gt;% ggplot(aes(fill = estimate)) + geom_sf(color = NA) + coord_sf(crs = 26911) + scale_fill_viridis_c(option = &quot;magma&quot;) 4.0.1 Challenge: Chained spatial operation Earlier we showed example of printing and storing a statement using parens (file &lt;- system.file(&quot;gpkg/nc.gpkg&quot;, package=&#39;sf&#39;)) ## [1] &quot;C:/Users/mweber/R/library/sf/gpkg/nc.gpkg&quot; How would we read this file into an sf data frame using chained operation? 4.0.2 Answer (file %&gt;% read_sf() -&gt; nc) ## Simple feature collection with 100 features and 14 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 ## geographic CRS: NAD27 ## # A tibble: 100 x 15 ## AREA PERIMETER CNTY_ CNTY_ID NAME FIPS FIPSNO CRESS_ID BIR74 SID74 NWBIR74 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.114 1.44 1825 1825 Ashe 37009 37009 5 1091 1 10 ## 2 0.061 1.23 1827 1827 Alle~ 37005 37005 3 487 0 10 ## 3 0.143 1.63 1828 1828 Surry 37171 37171 86 3188 5 208 ## 4 0.07 2.97 1831 1831 Curr~ 37053 37053 27 508 1 123 ## 5 0.153 2.21 1832 1832 Nort~ 37131 37131 66 1421 9 1066 ## 6 0.097 1.67 1833 1833 Hert~ 37091 37091 46 1452 7 954 ## 7 0.062 1.55 1834 1834 Camd~ 37029 37029 15 286 0 115 ## 8 0.091 1.28 1835 1835 Gates 37073 37073 37 420 0 254 ## 9 0.118 1.42 1836 1836 Warr~ 37185 37185 93 968 4 748 ## 10 0.124 1.43 1837 1837 Stok~ 37169 37169 85 1612 1 160 ## # ... with 90 more rows, and 4 more variables: BIR79 &lt;dbl&gt;, SID79 &lt;dbl&gt;, ## # NWBIR79 &lt;dbl&gt;, geom &lt;MULTIPOLYGON [°]&gt; A question to use on a spatial tibble - What type of object is ’‘? If you run head() does it behave the way you’re used to seeing head function? How might you get the behavior you’re used to seeing from head with’’ "]
]
