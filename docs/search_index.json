[
["reading-in-spatial-data.html", "Chapter 2 Reading in Spatial Data 2.1 Reading in vector data", " Chapter 2 Reading in Spatial Data There are several ways we typically get spatial data into R: Load spatial files we have on our machine or from remote source Load spatial data that is part of an R package Grab data using API (often making use of particular R packages) Converting flat files with x,y data to spatial data Geocoding data (we saw example of this at beginning) For reading and writing vector and raster data in R, the three primary packages you’ll use are: sf or rgdal for vector formats such as ESRI Shapefiles, GeoJSON, and GPX - both packages use OGR, which is a library under the GDAL source tree,under the hood raster for raster formats such as GeoTIFF or ESRI or ASCII grid using GDAL under the hood We can quickly discover supported I/O vector formats either via sf or rgdal: library(knitr) library(sf) library(rgdal) kable(head(ogrDrivers(),n=5)) name long_name write copy isVector AeronavFAA Aeronav FAA FALSE FALSE TRUE AmigoCloud AmigoCloud TRUE FALSE TRUE ARCGEN Arc/Info Generate FALSE FALSE TRUE AVCBin Arc/Info Binary Coverage FALSE FALSE TRUE AVCE00 Arc/Info E00 (ASCII) Coverage FALSE FALSE TRUE kable(head(st_drivers(what=&#39;vector&#39;),n=5)) name long_name write copy is_raster is_vector vsi PCIDSK PCIDSK PCIDSK Database File TRUE FALSE TRUE TRUE TRUE netCDF netCDF Network Common Data Format TRUE TRUE TRUE TRUE FALSE PDS4 PDS4 NASA Planetary Data System 4 TRUE TRUE TRUE TRUE TRUE JP2OpenJPEG JP2OpenJPEG JPEG-2000 driver based on OpenJPEG library FALSE TRUE TRUE TRUE TRUE JPEG2000 JPEG2000 JPEG-2000 part 1 (ISO/IEC 15444-1), based on Jasper library FALSE TRUE TRUE TRUE TRUE As well as I/O raster formats via sf: library(knitr) kable(head(st_drivers(what=&#39;raster&#39;),n=5)) name long_name write copy is_raster is_vector vsi VRT VRT Virtual Raster TRUE TRUE TRUE FALSE TRUE DERIVED DERIVED Derived datasets using VRT pixel functions FALSE FALSE TRUE FALSE FALSE GTiff GTiff GeoTIFF TRUE TRUE TRUE FALSE TRUE NITF NITF National Imagery Transmission Format TRUE TRUE TRUE FALSE TRUE RPFTOC RPFTOC Raster Product Format TOC format FALSE FALSE TRUE FALSE TRUE 2.1 Reading in vector data sf can be used to read numerous file types: Shapefiles Geodatabases Geopackages Geojson Spatial database files 2.1.1 Reading in shapefiles Typically working with vector GIS data we work with ESRI shapefiles or geodatabases - here we have an example of how one would read in a shapefie using sf: download.file(&quot;ftp://ftp.gis.oregon.gov/adminbound/citylim_2017.zip&quot;,&quot;citylim_2017.zip&quot;) unzip(&quot;citylim_2017.zip&quot;, exdir = &quot;.&quot;) citylims &lt;- st_read(&quot;citylim_2017.shp&quot;) plot(citylims$geometry, axes=T, main=&#39;Oregon City Limits&#39;) # plot it! # want to get rid of scientific notation in your plot? options(scipen=3) plot(citylims$geometry, axes=T, main=&#39;Oregon City Limits&#39;) 2.1.2 st_read versus read_sf {.challenge} Above, I didn’t pass any parameters to st_read - typically I would pass the parameters quiet=TRUE and stringsAsFactors=FALSE - why would this be a good practice in general? 2.1.3 Answer {.solution} read_sf is an sf alternative to st_read (see this section 1.2.2). Try reading in citylims data above using read_sf and notice difference, and check out help(read_sf). read_sf and writesf` are simply aliases for st_read and st_write with modified default arguments. Big differences are: stringsAsFactors=FALSE quiet=TRUE as_tibble=TRUE 2.1.4 Reading in geodatabases We use st_read or read_sf similarly for reading in an ESRI file geodatabase feature: We use st_read similarly for reading in an ESRI file geodatabase feature: download.file(&quot;https://www.blm.gov/or/gis/files/web_corp/state_county_boundary.zip&quot;,&quot;state_county_boundary.zip&quot;) unzip(&quot;state_county_boundary.zip&quot;, exdir = &quot;.&quot;) fgdb = &quot;state_county_boundary.gdb&quot; # List all feature classes in a file geodatabase st_layers(fgdb) # Read the feature class state_poly &lt;- st_read(dsn=fgdb,layer=&quot;state_poly&quot;) plot(state_poly$SHAPE, axes=TRUE) 2.1.5 Reading in geodatabases Another spatial file format is the geopackage. Let’s try a quick read and write of geopackage data. First we’ll read in a geopackage using data that comes with sf using dplyr syntax just to show something a bit different and use read_sf as an alternative to st_read. You may want to try writing the data back out as a geopackage as well. Quick question: What are a couple advantages of geopackages over shapefiles? nc &lt;- system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf() # reads in head(nc) 2.1.6 Open spatial data sources There is a wealth of open spatial data accessible online now via static URLs or APIs - a few examples include Data.gov, NASA SECAC Portal, Natural Earth, UNEP GEOdata, and countless others listed here at Free GIS Data. From static URLs, we can simply use download.file() as in this example from Geocomputation with R using data from the National Park data catalog: # download.file(url = &quot;http://nrdata.nps.gov/programs/lands/nps_boundary.zip&quot;, # destfile = &quot;nps_boundary.zip&quot;) # unzip(zipfile = &quot;nps_boundary.zip&quot;) f = &quot;data/nps_boundary.shp&quot; usa_parks &lt;- st_read(dsn = f) ca_parks &lt;- subset(usa_parks, STATE ==&#39;CA&#39;) plot(ca_parks$geometry, axes=T, main = &#39;National Parks in CA&#39;, col=&#39;green&#39;) plot(US[US$NAME_1==&#39;California&#39;,], add=T) 2.1.7 Spatial data from R packages There are also a number of R packages written specifically to provide access to geospatial data - below are a few and we’ll step through some examples of pulling in data using some of these packages. Table 2.1: Example R packages for spatial data retrieval. Package name Description USABoundaries Provide historic and contemporary boundaries of the US tigris Download and use US Census TIGER/Line Shapefiles in R tidycensus Uses Census American Community API to return tidyverse and optionally sf ready data frames FedData Functions for downloading geospatial data from several federal sources elevatr Access elevation data from various APIs (by Jeff Hollister) getlandsat Provides access to Landsat 8 data. osmdata Download and import of OpenStreetMap data. raster The getData() function downloads and imports administrative country, SRTM/ASTER elevation, WorldClim data. rnaturalearth Functions to download Natural Earth vector and raster data, including world country borders. rnoaa An R interface to National Oceanic and Atmospheric Administration (NOAA) climate data. rWBclimate An access to the World Bank climate data. Below is an example of pulling in US states using the rnaturalearth package - note that the default is to pull in data as sp objects and we coerce to sf. Also take a look at the chained operation using dplyr and see if this makes sense to you - we’ll explore more in following section. Try changing the filter or a parameter in ggplot. library(rnaturalearth) library(dplyr) library(ggplot2) states &lt;- ne_states(country = &#39;United States of America&#39;) states_sf &lt;- st_as_sf(states) states_sf %&gt;% dplyr::filter(!name %in% c(&#39;Hawaii&#39;,&#39;Alaska&#39;) &amp; !is.na(name)) %&gt;% ggplot + geom_sf() 2.1.8 Read in raster data Here we use the getData function in the raster package to download elevation into a RasterLayer and grab administrative boundaries from a database of global administrative boundaries - warning: sometimes getData function has trouble accessing the server and download can be a bit slow. Here we see as well how we can use vector spataio polygon data to crop raster data. library(raster) US &lt;- getData(&quot;GADM&quot;,country=&quot;USA&quot;,level=2) Benton &lt;- US[US$NAME_1==&#39;Oregon&#39; &amp; US$NAME_2==&#39;Benton&#39;,] elev &lt;- getData(&#39;SRTM&#39;, lon=-123, lat=44) elev &lt;- crop(elev, Benton) elev &lt;- mask(elev, Benton) plot(Benton, main=&quot;Elevation (m) in Benton County, Oregon&quot;, axes=T) plot(elev, add=TRUE) plot(Benton, add=TRUE) 2.1.9 Read in OpenStreetMap data The osmdata package is a fantastic resource for leveraging the OpenStreetMap (OSM) database. library(osmdata) library(mapview) footway &lt;- opq(bbox = &quot;corvallis oregon&quot;) %&gt;% add_osm_feature(key = &quot;highway&quot;, value = &quot;footway&quot;) %&gt;% osmdata_sf() footway &lt;- footway$osm_lines mapview(footway$geometry) library(osmdata) library(mapview) rstrnts &lt;- opq(bbox = &quot;corvallis oregon&quot;) %&gt;% add_osm_feature(key = &quot;amenity&quot;, value = &quot;restaurant&quot;) %&gt;% osmdata_sf() rstrnts &lt;- rstrnts$osm_points mapview(rstrnts$geometry) We often have flat files, locally on our machine or accessed elsewhere, that have coordinate information which we would like to make spatial: library(devtools) library(readr) library(ggplot2) # install_github(&quot;mhweber/awra2020spatial&quot;, force=TRUE) library(awra2020spatial) gages = read_csv(system.file(&quot;extdata/Gages_flowdata.csv&quot;, package = &quot;awra2020spatial&quot;)) sites_sf &lt;- gages %&gt;% st_as_sf(coords = c(&quot;LON_SITE&quot;, &quot;LAT_SITE&quot;), crs = 4269, remove = FALSE) %&gt;% dplyr::select(STATION_NM,LON_SITE, LAT_SITE) ggplot() + geom_sf(data=sites_sf) "]
]
